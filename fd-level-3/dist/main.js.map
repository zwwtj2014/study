{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./main.ts","webpack:///./station-index.ts","webpack:///./station.ts","webpack:///./ticket-index.ts","webpack:///./tickt.ts","webpack:///./train.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;ACnEgB;AAChB;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjBkB;AACK;AACN;AACK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA,wBAAwB;AACxB,uBAAuB;AACvB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uBAAuB;AAChE;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main.ts\");\n","import { Train } from \"./train\";\r\nwindow[\"train\"] = new Train();\r\n","export class StationIndex {\r\n    constructor() {\r\n        // order\r\n        this.orderStation = new Map();\r\n        // name\r\n        this.nameStation = new Map();\r\n    }\r\n    //\r\n    build(stations) {\r\n        for (const s of stations) {\r\n            this.orderStation.set(s.order, s);\r\n            this.nameStation.set(s.name, s);\r\n        }\r\n    }\r\n    getStationByOrder(o) {\r\n        return this.orderStation.get(+o);\r\n    }\r\n    getStationByName(n) {\r\n        return this.nameStation.get(n);\r\n    }\r\n    getStationByOrderOrName(...ks) {\r\n        return ks.map(k => {\r\n            return this.getStationByOrder(k) || this.getStationByName(k);\r\n        });\r\n    }\r\n    /**\r\n     * 查询两个站点之间要经过的站\r\n     * // todo: 需要缓存各个站点之间的数据?\r\n     */\r\n    queryStationsFromTo(from, to) {\r\n        const [fStation, tStation] = this.getStationByOrderOrName(from, to);\r\n        if (!fStation || !tStation) {\r\n            return null;\r\n        }\r\n        const fOrder = fStation.order;\r\n        const tOrder = tStation.order;\r\n        if (fOrder >= tOrder) {\r\n            return null;\r\n        }\r\n        let pStations = [fStation];\r\n        for (let o = fOrder + 1; o <= tOrder; ++o) {\r\n            pStations.push(this.getStationByOrder(o));\r\n        }\r\n        return pStations;\r\n    }\r\n}\r\n","// 站序 站名 到站时间 出发时间 停留时间\r\n// 01 北京南 ---- 08:35 ----\r\n// 02 德州东 09:48 09:50 2分钟\r\nexport class Station {\r\n    constructor(sInfo, sumIdleSeat) {\r\n        const sArr = sInfo.split(/\\t| /);\r\n        this.order = +sArr[0];\r\n        this.name = sArr[1];\r\n        // inT;outT;stayT\r\n        this.seatStatus = Array.from({ length: sumIdleSeat }, () => true);\r\n    }\r\n    book(i) {\r\n        if (i < 0 || i > this.seatStatus.length) {\r\n            throw new RangeError(\"seat no. error\");\r\n        }\r\n        if (!this.seatStatus[i]) {\r\n            throw new Error(\"seat has been booked\");\r\n        }\r\n        this.seatStatus[i] = false;\r\n    }\r\n    cancle(i) {\r\n        if (i < 0 || i > this.seatStatus.length) {\r\n            throw new RangeError(\"seat no error\");\r\n        }\r\n        this.seatStatus[i] = true;\r\n    }\r\n}\r\n","export class TicketIndex {\r\n    constructor() {\r\n        this.seqNoMap = new Map();\r\n    }\r\n    getBySeqNo(seqNo) {\r\n        return this.seqNoMap.get(seqNo) || null;\r\n    }\r\n    build(ticket) {\r\n        this.seqNoMap.set(ticket.seqNo, ticket);\r\n    }\r\n}\r\n","export class Ticket {\r\n    constructor(seqNo, seat, from, to, status = \"OK\") {\r\n        this.seqNo = seqNo;\r\n        this.seat = seat;\r\n        this.from = from;\r\n        this.to = to;\r\n        this.status = status;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            seqNo: this.seqNo,\r\n            seat: this.seat,\r\n            from: this.from,\r\n            to: this.to,\r\n            status: this.status\r\n        };\r\n    }\r\n}\r\n","import { Station } from \"./station\";\r\nimport { StationIndex } from \"./station-index\";\r\nimport { Ticket } from \"./tickt\";\r\nimport { TicketIndex } from \"./ticket-index\";\r\n/******************************\r\nG111,10\r\n站序 站名 到站时间 出发时间 停留时间\r\n01 北京南 ---- 08:35 ----\r\n02 德州东 09:48 09:50 2分钟\r\n03 济南西 10:14 10:17 3分钟\r\n04 泰安 10:35 10:46 11分钟\r\n05 滁州 12:33 12:35 2分钟\r\n06 南京南 12:54 12:57 3分钟\r\n07 丹阳北 13:22 13:24 2分钟\r\n08 无锡东 13:47 13:49 2分钟\r\n09 上海虹桥 14:22 14:22 ----\r\n */\r\nexport class Train {\r\n    constructor() {\r\n        this.seqNO = 1;\r\n        this.stationIndex = new StationIndex();\r\n        this.ticketIndex = new TicketIndex();\r\n    }\r\n    init(data) {\r\n        if (data == undefined) {\r\n            return;\r\n        }\r\n        const [trainInfo, , ...stationsInfo] = data.split(\"\\n\");\r\n        // line1: 车次,座位数\r\n        const tmpLine1 = trainInfo.split(\",\");\r\n        if (tmpLine1.length !== 2) {\r\n            throw new RangeError(\"parameter does not match\");\r\n        }\r\n        this.trainTrip = tmpLine1[0];\r\n        this.seatNum = +tmpLine1[1];\r\n        // line3-line: 站序 站名 到站时间 出发时间 停留时间\r\n        this.stations = new Array(stationsInfo.length);\r\n        for (let i = this.stations.length; --i >= 0;) {\r\n            this.stations[i] = new Station(stationsInfo[i], this.seatNum);\r\n        }\r\n        // build index\r\n        this.stationIndex.build(this.stations);\r\n    }\r\n    query(from, to) {\r\n        const pStations = this.stationIndex.queryStationsFromTo(from, to);\r\n        if (pStations === null) {\r\n            return 0;\r\n        }\r\n        return this.queryIdleSeatByStations(pStations).filter(s => s).length;\r\n    }\r\n    /**\r\n     * @returns {json|null} ticket json\r\n     * {\r\n     *    seqNo: number; // 车票序号, 从1开始\r\n     *    seat: number; // 座位号, 从1开始\r\n     *    from: number;\r\n     *    to: number;\r\n     *    status: string; // 车票状态, 正常为OK\r\n     * }\r\n     */\r\n    book(from, to) {\r\n        const pStations = this.stationIndex.queryStationsFromTo(from, to);\r\n        if (pStations === null) {\r\n            return null;\r\n        }\r\n        const idleSeatStatus = this.queryIdleSeatByStations(pStations);\r\n        // 输出的站顺序有问题或者票已经售罄\r\n        if (idleSeatStatus.filter(s => s).length <= 0) {\r\n            return null;\r\n        }\r\n        // 卖的座位就是剩余状态中的第一张\r\n        const seat = idleSeatStatus.findIndex(s => s);\r\n        // 将经过的站seat位置都标志为false\r\n        for (let i = pStations.length - 2; i >= 0; --i) {\r\n            pStations[i].book(seat);\r\n        }\r\n        // 存索引\r\n        const ticket = new Ticket(this.seqNO++, seat, pStations[0].order, pStations[pStations.length - 1].order);\r\n        this.ticketIndex.build(ticket);\r\n        return ticket.toJSON();\r\n    }\r\n    /**\r\n     * @returns {json|null} ticket json\r\n     */\r\n    queryTicket(seqNo) {\r\n        return this.ticketIndex.getBySeqNo(seqNo);\r\n    }\r\n    cancel(seqNo) {\r\n        let ticket = this.ticketIndex.getBySeqNo(seqNo);\r\n        if (ticket == null) {\r\n            return null;\r\n        }\r\n        // 1. 回收座位\r\n        const pStations = this.stationIndex.queryStationsFromTo(ticket.from, ticket.to);\r\n        // 将经过的站seat位置都标志为true\r\n        for (let i = pStations.length - 2; i >= 0; --i) {\r\n            pStations[i].cancle(ticket.seat);\r\n        }\r\n        // 2. 修改状态\r\n        ticket.status = \"CANCEL\";\r\n        return ticket;\r\n    }\r\n    /**\r\n     * [\r\n     *    [1,2],\r\n     *    [3,7],\r\n     *    ['xx','yy'],\r\n     *    [6,8]\r\n     * ]\r\n     */\r\n    // 1.每个延迟内最多只能处理一个订单 => 两个订单的时间差大于等于delay ?\r\n    // 2.需要考虑最优解 ?\r\n    // 3.这块代码没时间再细看了, 而且很多逻辑和上面的重复了，比如根据from和to取了多遍的station\r\n    batchOrder(orders, delay, doneFn) {\r\n        // 可回收的座位 => 站短的?\r\n        let orderAndGap = [];\r\n        for (let k = orders.length - 1; k >= 0; --k) {\r\n            const o = orders[k];\r\n            const pStations = this.stationIndex.queryStationsFromTo(o[0], o[1]);\r\n            if (pStations === null) {\r\n                continue;\r\n            }\r\n            const gap = pStations.pop().order - pStations[0].order;\r\n            orderAndGap.push({\r\n                gap: gap,\r\n                order: o\r\n            });\r\n        }\r\n        orderAndGap.sort((o1, o2) => {\r\n            return o1.gap - o2.gap;\r\n        });\r\n        let i = 0;\r\n        let len = orderAndGap.length;\r\n        let ts = [];\r\n        let fn = () => {\r\n            if (i < len) {\r\n                const o = orderAndGap[i++].order;\r\n                let t = this.book(o[0], o[1]);\r\n                if (t !== null) {\r\n                    ts.push(t);\r\n                }\r\n                setTimeout(fn, delay);\r\n            }\r\n            else {\r\n                doneFn(ts);\r\n            }\r\n        };\r\n        setTimeout(fn, delay);\r\n    }\r\n    queryIdleSeatByStations(pStations) {\r\n        let idleSeatStatus = Array.from({ length: this.seatNum }, () => true);\r\n        // 这里-2是因为空闲座位不用关心到达站\r\n        for (let i = pStations.length - 2; i >= 0; --i) {\r\n            const s = pStations[i];\r\n            s.seatStatus.forEach((ss, i) => {\r\n                idleSeatStatus[i] = idleSeatStatus[i] && ss;\r\n            });\r\n        }\r\n        return idleSeatStatus;\r\n    }\r\n}\r\n"],"sourceRoot":""}